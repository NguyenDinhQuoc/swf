# imports
import os
import torch
from torchvision.utils import save_image
from torchvision.utils import make_grid
import numpy as np
import tqdm
import copy
from qsketch.sketch import Projectors
import argparse
from scipy.interpolate import interp1d


class Chain(None):

    def __init__(self, num_sketches, epochs, reg=1):
        self.num_sketches = num_sketches
        self.epochs = epochs
        self.reg = reg
        self.qf = None

    def __copy__(self):
        return Chain(self.num_sketches, self.epochs, self.lamb)


def IDT(sketch_file, chain_in, samples_gen_fn,
        plot_function, compute_chain_out=True):

    # Load the sketch data for target
    print('Loading the sketching data for target')
    data = np.load(sketch_file).item()
    qf = data['qf']

    [num_sketches, data_dim, num_quantiles] = qf.shape
    img_size = data['img_size']
    nchannels = data['nchannels']
    data_dim = nchannels*img_size**2
    print('done')

    # prepare the projectors
    projectors = Projectors(data_dim=data_dim, size=num_sketches)
    quantiles = np.linspace(0, 100, num_quantiles)

    if compute_chain_out:
        # prepare the chain_out
        chain_out = copy.copy(chain_in)
        chain_out.qf = np.empty((chain_in.epochs,
                                 chain_in.num_sketches,
                                 data_dim, num_quantiles))

    samples = samples_gen_fn(data_dim)

    for epoch in tqdm.tqdm(range(chain_in.epochs)):
        for sketch_index in tqdm.tqdm(range(chain_in.num_sketches)):
            projector = projectors[sketch_index]
            projections = np.dot(samples, projector.T)

            if chain_in.qf is None:
                # we need to compute the quantile function for the particles
                # in the projected domain
                source_qf = np.percentile(projections, quantiles, axis=0)
            else:
                source_qf = chain_in.qf[epoch, sketch_index]

            transported = np.empoty(projections.shape)
            for d in range(data_dim):
                F = interp1d(source_qf[d], quantiles, kind='linear',
                             bounds_error=False, fill_value='extrapolate')
                Ginv = interp1d(quantiles, qf[sketch_index, d], kind='linear',
                                bounds_error=False, fill_value='extrapolate')
                zd = np.clip(projections[:, d],
                             source_qf[d, 0], source_qf[d, -1])
                zd = F(zd)
                zd = np.clip(zd, 0, 100)
                transported[:, d] = Ginv(zd)

            samples += (np.dot(transported - projections, projector.T)
                        + chain_in.reg*np.random.randn(*samples.shape))

            if compute_chain_out:
                chain_out.qf[epoch, sketch_index] = source_qf

        if plot_function is not None:
            plot_function(samples)

    if not compute_chain_out:
        chain_out = None
    return samples, chain_out


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=
                                     'Performs iterative distribution transfer'
                                     ' with sliced Wasserstein flow.')
    parser.add_argument("sketch_file", help="path to the sketch file as "
                        "generated by the `sketch.py` script")
    parser.add_argument("-w", "--write",
                        help="If provided, save the generated samples to "
                             "this file path after transportation")
    parser.add_argument("-i", "--input_chain",
                        help="Input chain to use, as returned by this same "
                             "script. If provided, overrides any other of "
                             "the parameters `epochs`, `dim`, `lambda`")
    parser.add_argument("-o", "--output_chain",
                        help="keep output chain, and save it to "
                             "provided filepath")
    parser.add_argument("-s", "--samples",
                        help="Initial samples to use, must be a file"
                             "containing a ndarray of dimension num_samples x "
                             "dim, saved with numpy. If provided, overrides"
                             "the parameters `dim`, `num_samples`")
    parser.add_argument("-d", "--dim",
                        help="Dimension of the random input",
                        type=int,
                        default=100)
    parser.add_argument("-n", "--num_samples",
                        help="Number of samples to draw and to transport",
                        type=int,
                        default=3000)
    parser.add_argument("-e", "--epochs",
                        help="Number of epochs",
                        type=int,
                        default=10)
    parser.add_argument("-r", "--reg",
                        help="Regularization term",
                        type=float,
                        default=1.)
    parser.add_argument("--plot",
                        help="Flag indicating whether or not to plot samples",
                        action="store_true")
    parser.add_argument("-d", "--plot_dir",
                        help="Output directory for the plots",
                        default="./samples")

    args = parser.parse_args()

    if args.input_chain is not None:
        input_chain = np.load(args.input_chain).item()
    else:
        input_chain = Chain(args.num_sketches, args.epochs, args.reg)

    if args.samples is None:
        def generate_samples(data_dim):
            z = np.random.randn(args.num_samples, args.dim)
            np.random.seed(0)
            up_sampling = np.random.randn(args.dim, data_dim)
            return np.dot(z, up_sampling)
    else:
        def generate_samples(data_dim):
            samples = np.load(args.samples)
            if len(samples.shape) != 2 or samples.shape[1] != data_dim:
                raise ValueError('Samples in %s do not have the right shape. '
                                 'They should be num_samples x %d for this '
                                 'sketch file.' % (args.samples, data_dim))
            return samples
    if args.output_chain is not None:
        compute_output_chain = True
    else:
        compute_output_chain = False

    if args.plot:
        if not os.path.exists(args.plot_dir):
            os.mkdir(args.plot_dir)

        def plot_function(samples, epoch, sketch_index):
            [num_samples, data_dim] = samples.shape
            square_dim_bw = np.sqrt(data_dim)
            square_dim_col = np.sqrt(data_dim/3)
            if not (square_dim_col % 1):
                nchan = 3
                img_dim = square_dim_col
            elif not (square_dim_bw % 1):
                nchan = 1
                img_dim = square_dim_bw
            else:
                raise ValueError('Can only plot images for now.')

            samples = np.reshape(samples,
                                 [num_samples, nchan, img_dim, img_dim])
            pic = make_grid(torch.Tensor(samples),
                            nrow=8, padding=2, normalize=True)
            save_image(pic, '{}/image_{}_{}.png'.format(args.plot_dir, epoch,
                                                        sketch_index))
    else:
        plot_function = None

    samples, chain_out = IDT(args.sketch_file, input_chain, generate_samples,
                             plot_function, compute_output_chain)

    if compute_output_chain:
        np.save(args.output_chain, chain_out)
    if args.write is not None:
        np.save(args.write, samples)
